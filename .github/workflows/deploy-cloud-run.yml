name: Deploy to Google Cloud Run

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: pasargamex-api
  REGION: asia-southeast2  # Jakarta region for Indonesian market
  ARTIFACT_REGISTRY_REGION: asia-southeast2
  IMAGE_NAME: asia-southeast2-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/pasargamex/pasargamex-api

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22.4'
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Download dependencies
      run: go mod download
      
    - name: Run tests
      run: go test -v ./...
      
    - name: Run go vet
      run: go vet ./...
      
    - name: Build application
      run: go build -v ./cmd/api/main.go

  build-and-deploy:
    name: Build and Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        
    - name: Configure Docker for Artifact Registry
      run: gcloud auth configure-docker asia-southeast2-docker.pkg.dev
      
    - name: Build Docker image
      run: |
        docker build -t $IMAGE_NAME:$GITHUB_SHA \
                     -t $IMAGE_NAME:latest \
                     -f dockerfile .
                     
    - name: Push Docker image to Container Registry
      run: |
        docker push $IMAGE_NAME:$GITHUB_SHA
        docker push $IMAGE_NAME:latest
        
    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy $SERVICE_NAME \
          --image=$IMAGE_NAME:$GITHUB_SHA \
          --platform=managed \
          --region=$REGION \
          --allow-unauthenticated \
          --port=8080 \
          --memory=1Gi \
          --cpu=1 \
          --min-instances=0 \
          --max-instances=10 \
          --concurrency=80 \
          --timeout=3600 \
          --set-env-vars="PORT=8080" \
          --set-env-vars="ENVIRONMENT=production" \
          --set-env-vars="MIDTRANS_ENVIRONMENT=production" \
          --set-env-vars="FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}" \
          --set-env-vars="FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}" \
          --set-env-vars="STORAGE_BUCKET=${{ secrets.GCS_BUCKET_NAME }}" \
          --set-env-vars="MIDTRANS_SERVER_KEY=${{ secrets.MIDTRANS_SERVER_KEY }}" \
          --set-env-vars="MIDTRANS_CLIENT_KEY=${{ secrets.MIDTRANS_CLIENT_KEY }}" \
          --set-env-vars="FIREBASE_SERVICE_ACCOUNT_JSON=${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}" \
          --set-env-vars="BASE_URL=${{ secrets.PRODUCTION_BASE_URL }}"
          
    - name: Update webhook URLs for production
      run: |
        echo "Deployment completed successfully!"
        echo "Service URL: $(gcloud run services describe $SERVICE_NAME --region=$REGION --format='value(status.url)')"
        echo "Remember to update Midtrans webhook URLs to point to the production domain"
        
    - name: Show deployment info
      run: |
        echo "=== Deployment Summary ==="
        echo "Project: $PROJECT_ID"
        echo "Service: $SERVICE_NAME"
        echo "Region: $REGION"
        echo "Image: $IMAGE_NAME:$GITHUB_SHA"
        echo "=========================="

  preview-deploy:
    name: Preview Deployment (PR)
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        
    - name: Configure Docker for Artifact Registry
      run: gcloud auth configure-docker asia-southeast2-docker.pkg.dev
      
    - name: Build Docker image for preview
      run: |
        docker build -t $IMAGE_NAME:pr-${{ github.event.number }} \
                     -f dockerfile .
                     
    - name: Push preview image
      run: |
        docker push $IMAGE_NAME:pr-${{ github.event.number }}
        
    - name: Deploy preview service
      run: |
        gcloud run deploy $SERVICE_NAME-pr-${{ github.event.number }} \
          --image=$IMAGE_NAME:pr-${{ github.event.number }} \
          --platform=managed \
          --region=$REGION \
          --allow-unauthenticated \
          --port=8080 \
          --memory=512Mi \
          --cpu=1 \
          --min-instances=0 \
          --max-instances=2 \
          --set-env-vars="PORT=8080" \
          --set-env-vars="ENVIRONMENT=staging" \
          --set-env-vars="MIDTRANS_ENVIRONMENT=sandbox" \
          --set-env-vars="FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}" \
          --set-env-vars="FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}" \
          --set-env-vars="STORAGE_BUCKET=${{ secrets.GCS_BUCKET_NAME }}" \
          --set-env-vars="MIDTRANS_SERVER_KEY=${{ secrets.MIDTRANS_SANDBOX_SERVER_KEY }}" \
          --set-env-vars="MIDTRANS_CLIENT_KEY=${{ secrets.MIDTRANS_SANDBOX_CLIENT_KEY }}"
          
    - name: Comment PR with preview URL
      uses: actions/github-script@v6
      with:
        script: |
          const serviceName = '${{ env.SERVICE_NAME }}-pr-${{ github.event.number }}';
          const region = '${{ env.REGION }}';
          const projectId = '${{ secrets.GCP_PROJECT_ID }}';
          const previewUrl = `https://${serviceName}-${projectId}.a.run.app`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `ðŸš€ **Preview Deployment Ready!**\n\n` +
                  `Preview URL: ${previewUrl}\n` +
                  `Environment: Staging (Midtrans Sandbox)\n\n` +
                  `This preview will be automatically cleaned up when the PR is closed.`
          });